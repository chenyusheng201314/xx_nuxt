<!--
    author : cys
-->

<template>
  <div>
    <LeftNav :data="leftNav"></LeftNav>
    <div class="admin-class" v-loading.fullscreen.lock="fullscreenLoading">
      <h2 class="title">课程管理</h2>
      <!-- 搜索 search-->
      <ul class="class-classify">
        <li>
          <span>课程分类</span>
          <el-select v-model="search_info.first_sort_id" placeholder="请选择" style="margin-right: 15px">
            <el-option
              v-for="(item,index) in search_info.first_sort_select"
              :key="index"
              :label="item.sort_name"
              :value="item.id"
            >
            </el-option>
          </el-select>
          <el-select v-model="search_info.second_sort_id" placeholder="请选择">
            <el-option
              v-for="(item,index) in search_info.second_sort_select"
              :key="index"
              :label="item.sort_name"
              :value="item.id">
            </el-option>
          </el-select>
        </li>
        <li>
          <span>课程名称</span>
          <input type="text" class="inp" v-model="search_info.course_name">
        </li>
        <li>
          <span>主讲导师</span>
          <el-select v-model="search_info.organization_id" placeholder="请选择" style="margin-right: 15px">
            <el-option
              v-for="(item,index) in search_info.organization_select"
              :key="index"
              :label="item.title"
              :value="item.id">
            </el-option>
          </el-select>
          <el-select v-model="search_info.teacher_id" placeholder="请选择">
            <el-option
              v-for="(item,index) in search_info.teacher_select"
              :key="index"
              :label="item.realname"
              :value="item.id">
            </el-option>
          </el-select>
        </li>
        <li>
          <span>上架状态</span>
          <el-select v-model="search_info.status" placeholder="请选择">
            <el-option
              v-for="(item,index) in search_info.status_select"
              :key="index"
              :label="item.name"
              :value="item.num">
            </el-option>
          </el-select>
        </li>
        <li>
          <span>参与的活动</span>
          <el-select v-model="search_info.activity_type" placeholder="请选择">
            <el-option
              v-for="(item,index) in search_info.activity_select"
              :key="index"
              :label="item.name"
              :value="item.num">
            </el-option>
          </el-select>
        </li>
        <li class="last-li">
          <div class="set-btn btn" @click="create_course">创建</div>
          <div class="search-btn btn" @click="search_list">搜索</div>
        </li>
      </ul>

      <!-- 课程列表-->
      <table>
        <tr>
          <th>序号</th>
          <th>课程封面图</th>
          <th>视频名称</th>
          <th>主讲导师</th>
          <th>单价（学币）</th>
          <th>销量</th>
          <th>参与活动</th>
          <th>上架状态</th>
          <th>操作</th>
        </tr>
        <tbody>
        <tr v-for="(item,index) in class_info" :key="index">


          <td width="80px">{{index + 1}}</td>
          <td width="120px">
            <img :src="item.cover.value" alt="" width="68px" height="42px">
          </td>
          <td width="400px">
            <p class="p1">{{item.course_name}}</p>
          </td>
          <td width="120px">{{item.organization_teacher=== null || item.organization_teacher === ''? '--' :
            item.organization_teacher.realname}}
          </td>
          <td width="180px">{{item.price}}</td>
          <td width="120px">{{item.sales}}</td>
          <td width="150px" class="td7">
            <img src="/admin/images/class/jing.png" alt="" v-show="item.is_jp === 1">
            <img src="/admin/images/class/new.png" alt="" v-show="item.is_new === 1">
            <img src="/admin/images/class/zeng.png" alt="" v-show="item.is_activity === 1">
            <img src="/admin/images/class/zhe.png" alt="" v-show="item.is_activity === 2">
            <img src="/admin/images/class/free.png" alt="" v-show="item.is_activity === 3">
            <img src="/admin/images/class/fen.png" alt="" v-show="item.is_activity === 4">
          </td>
          <td width="120px">
            <span class="in" v-show="item.status ===1">已上架</span>
            <span class="out" v-show="item.status ===0">已下架</span>
          </td>
          <td width="250px">
            <span class="see td-btn" @click="to_see(item.id,item)">查看</span>
            <span class="edit td-btn" @click="to_edit(item.id)">编辑</span>
            <span class="data td-btn" @click="to_data(index)">数据</span>
          </td>
        </tr>
        </tbody>
      </table>
      <div class="paging">
        <el-pagination
          @size-change="handleSizeChange"
          @current-change="handleCurrentChange"
          :current-page.sync="paging.currentPage"
          :page-sizes="paging.page_sizes"
          :page-size="paging.page_size"
          layout="prev, pager, next, sizes, jumper"
          :total="paging.total"
          :pager-count="5">
        </el-pagination>
      </div>
    </div>
    <!--编辑-->
    <el-dialog
      :title="cover_tit"
      :visible.sync="edit_show"
      :close-on-click-modal="false"
      class="edit-cover"
      v-loading.fullscreen.lock="fullscreenLoading"
      width="60%">
      <!--编辑-->
      <div class="edit-detail">
        <ul>
          <li class="li">
            <span class="type-name"><label>*</label>课程名称</span>
            <input type="text" maxlength="18" v-model="edit_info.lesson_name">
            <label class="error_info" v-show="edit_info.lesson_name === ''">必填项不能为空</label>
          </li>
          <li class="li">
            <span class="type-name"><label>*</label>主讲导师</span>
            <el-select
              v-model="edit_info.organization_id"
              placeholder="请选择"
              style="margin-right: 15px"
              @change="edit_jigou_change"
            >
              <el-option
                v-for="(item,index) in edit_info.organization_select"
                :key="index"
                :label="item.title"
                :value="item.id"
              >
              </el-option>
            </el-select>
            <el-select v-model="edit_info.teacher_id" placeholder="请选择">
              <el-option
                v-for="(item,index) in edit_info.teacher_select"
                :key="index"
                :label="item.realname"
                :value="item.id"
              >
              </el-option>
            </el-select>
            <label class="error_info"
                   v-show="edit_info.organization_id === '' || edit_info.teacher_id === ''">必填项不能为空</label>
          </li>
          <li class="li">
            <span class="type-name"><label>*</label>课程分类</span>
            <el-select v-model="edit_info.first_sort_id" placeholder="请选择"
                       style="margin-right: 15px"
                       @change="edit_fir_change"
            >
              <el-option
                v-for="(item,index) in edit_info.first_sort_select"
                :key="index"
                :label="item.sort_name"
                :value="item.id"
              >
              </el-option>
            </el-select>
            <el-select v-model="edit_info.second_sort_id" placeholder="请选择">
              <el-option
                v-for="(item,index) in edit_info.second_sort_select"
                :key="index"
                :label="item.sort_name"
                :value="item.id"
              >
              </el-option>
            </el-select>
            <label class="error_info"
                   v-show="edit_info.first_sort_id === ''|| edit_info.second_sort_id === ''">必填项不能为空</label>
          </li>


          <li class="li">
            <span class="type-name"><label>*</label>课程封面</span>
            <img :src="submit_avatar.pic_head" alt="" width="177" height="111" @click="cut_pic(1500,852)">
          </li>

          <li class="li">
            <span class="type-name">课程总时长</span>
            <span class="class-time">{{(edit_info.time / 60).toFixed(1)}}分钟</span>
          </li>
          <li class="li">
            <span class="type-name"><label>*</label>课程单价</span>
            <input type="text" maxlength="8" v-model="edit_info.price">
            <span class="class-time">学币</span>
            <label class="error_info" v-show="edit_info.price === ''">必填项不能为空</label>
          </li>
          <li class="li">
            <span class="type-name"><label>*</label>上架状态</span>
            <el-select v-model="edit_info.status" placeholder="请选择">
              <el-option
                v-for="(item,index) in edit_info.status_select"
                :key="index"
                :label="item.name"
                :value="item.num"
              >
              </el-option>
            </el-select>
          </li>
          <li class="li">
            <span class="type-name">课程简介</span>
            <textarea v-model="edit_info.introduce"></textarea>
          </li>
          <li class="li">
            <span class="type-name">详情介绍</span>
            <div>
              <quill-editor
                v-model="edit_info.description"
                ref="myQuillEditor"
                @blur="onEditorBlur($event)"
                @focus="onEditorFocus($event)"
                @change="onEditorChange($event)">
              </quill-editor>
            </div>

          </li>
        </ul>
        <ul class="class-section" v-for="(item,index) in edit_info.chapter_content" :key="index">
          <li class="title">
            <span class="tit-name">第{{index + 1}}章</span>
            <input type="text" v-model="item.chapter_name" maxlength="10">
            <div class="add-class" @click="add_hour(index)">+ 添加课时</div>
            <span class="delete-one" @click="detele_num(index,item.chapter_id)"
                  v-show="section_delete_show && index !== 0">
                <img src="/admin/images/class/delete.png" alt="">
              </span>
          </li>
          <li class="li2" v-for="(it,ind) in item.sections" :key="ind">
              <span class="span1">
                课时{{ind + 1}}
              </span>
            <input type="text" class="inp1" v-model="it.section_name" :disabled="!it.Isedit" maxlength="15">

            <span class="span2">
                <img src="/admin/images/class/no-choose.png" @click="app_see(index,ind,1)" alt=""
                     v-show="it.app_free === 0">
                <img src="/admin/images/class/choose.png" @click="app_see(index,ind,0)" alt=""
                     v-show="it.app_free === 1">
                只允许APP试看
              </span>
            <span class="span2">
                <img src="/admin/images/class/no-choose.png" @click="pc_see(index,ind,1)" alt=""
                     v-show="it.pc_free === 0">
                <img src="/admin/images/class/choose.png" @click="pc_see(index,ind,0)" alt="" v-show="it.pc_free === 1">
                只允许PC试看
              </span>
            <span class="span3">{{(it.media_time / 60).toFixed(1)}}分钟</span>
            <span class="span4" v-show="!it.Isedit" @click="hour_edit(index,ind)">配置</span>
            <span class="span5" v-show="it.Isedit" @click="hour_edit(index,ind)">保存</span>
            <span class="span6" @click="delete_hour(index,ind,it.section_id)">删除</span>
          </li>
        </ul>
        <div class="add-num" :class="{no_add : edit_info.chapter_content.length > 19}" @click="add_num">+ 添加章节</div>
        <div class="edit-save" @click="lesson_save">保存</div>
      </div>
      <!--选择课时-->
      <div class="class-hour-cover" v-show="class_hour.show">
        <div class="class-hour-con">
         <span class="edit-cover-close" @click="close_hour">
            <img src="/admin/images/class/close.png" alt="">
        </span>
          <h2>选择课时</h2>
          <ul class="hour-con-classify">
            <li>
              <span>视频ID</span>
              <input type="text" class="inp2" v-model="class_hour.video_id">
            </li>
            <li>
              <span>视频名称</span>
              <input type="text" class="inp2" v-model="class_hour.video_name">
            </li>
            <li>
              <span>上传时间</span>

              <el-date-picker
                v-model="class_hour.time[0]"
                type="date"
                value-format="yyyy-MM-dd 00:00:00"
                placeholder="选择日期">
              </el-date-picker>
              -
              <el-date-picker
                v-model="class_hour.time[1]"
                type="date"
                value-format="yyyy-MM-dd 23:59:59"
                placeholder="选择日期">
              </el-date-picker>
            </li>
            <li>
              <span>是否被使用</span>
              <el-select v-model="class_hour.choose_use" placeholder="请选择">
                <el-option
                  v-for="(item,index) in class_hour.isUse"
                  :key="index"
                  :label="item.name"
                  :value="item.type">
                </el-option>
              </el-select>
            </li>
            <li class="last-li" @click="video_search">搜索</li>
          </ul>

          <table class="hour-con-info">
            <tr>
              <th></th>
              <th>序号</th>
              <th>视频ID</th>
              <th>视频名称</th>
              <th>时长</th>
              <th>类型</th>
              <th>上传时间</th>
              <th>是否被使用</th>
            </tr>
            <tbody>
            <tr v-for="(item,index) in class_hour.detail" :key="index">
              <td width="55px">
                <p class="p1">
                  <img src="/admin/images/class/hour-no-choose.png" @click="hour_choose(index,true,item)" alt=""
                       v-show="!item.isChoose">
                  <img src="/admin/images/class/hour-choose.png" @click="hour_choose(index,false,item)" alt=""
                       v-show="item.isChoose">
                </p>
              </td>
              <td width="55px">{{index + 1}}</td>
              <td width="150px">{{item.video_id}}</td>
              <td width="250px">
                <p class="p2">{{item.show_name}}</p>
              </td>
              <td width="100px">{{(item.duration / 60).toFixed(1)}}分钟</td>
              <td width="80px">{{item.video_type}}</td>
              <td width="200px">{{item.created_at}}</td>
              <td>
                <span class="clo-error" v-show="item.is_used === 0">否</span>
                <span class="clo-right" v-show="item.is_used !== 0">是</span>
              </td>
            </tr>
            </tbody>
          </table>
          <!--分页-->
          <div class="paging">
            <el-pagination
              @size-change="video_handleSizeChange"
              @current-change="video_handleCurrentChange"
              :current-page.sync="class_hour.paging.currentPage"
              :page-sizes="class_hour.paging.page_sizes"
              :page-size="class_hour.paging.page_size"
              layout="prev, pager, next, sizes, jumper"
              :total="class_hour.paging.total"
              :pager-count="5">
            </el-pagination>
          </div>
          <div class="hour-save" @click="save_hour">保存</div>
        </div>
      </div>
    </el-dialog>
    <!--查看-->
    <el-dialog
      title="查看课程"
      :visible.sync="see_info.show"
      :close-on-click-modal="false"
      width="70%">
      <!--查看-->
      <div class="edit-course">
        <div class="class-info">
          <div class="info-left">
            <img :src="see_info.cover" alt="">
          </div>
          <div class="info-right">
            <p class="tit">{{see_info.tit}}</p>
            <p class="p">
              <span class="iconfont">&#xe621;</span>
              <span class="span">{{see_info.teacher}}</span>
            </p>
            <p class="p">
              <span class="iconfont">&#xe740;</span>
              <span class="span">{{see_info.class_hour}}课时</span>
              <span class="iconfont">&#xe693;</span>
              <span class="span">{{(see_info.time / 3600).toFixed(1) }}小时</span>
            </p>
            <p class="tip">
              <span class="iconfont" style="margin-right: 5px">&#xe705;</span>
              {{see_info.first_sort}} - {{see_info.second_sort}}
            </p>
          </div>
        </div>
        <div class="course-nav">
          <span class="nav-con "
                :class="{nav_active : see_info.nav_type === 1}"
                @click="see_nav_type(1)"
          >课程目录</span>
          <span class="nav-con"
                :class="{nav_active : see_info.nav_type === 2}"
                @click="see_nav_type(2)"
          >课程介绍</span>
        </div>
        <div v-show="see_info.nav_type === 1">
          <ul class="see-list" v-for="(item,index) in see_info.course_list" :key="index">
            <li class="tit">
              <span class="round"></span>
              <span class="txt">第{{index + 1}}章</span>
              <span class="txt">{{item.chapter_name}}</span>
            </li>
            <li class="li" v-for="(it,ind) in item.course_section" :key="ind">
              <span class="span1">课时 {{ind + 1}}</span>
              <span class="span2">{{it.section_name}}</span>
              <span class="span3">{{(it.media_time / 60).toFixed(1)}}分钟</span>
            </li>
          </ul>
        </div>
        <div style="margin-top: 10px" class="see_con" v-show="see_info.nav_type === 2" v-html="see_info.con"></div>
      </div>
    </el-dialog>
    <!-- Modal 图片裁剪  -->
    <el-dialog title="图片裁剪" :visible.sync="dialogCropperVisible" append-to-body width="50%">
      <cropper
        :cutPicInfo="cutPicInfo"
        v-on:cutPicSuccess="cutPicSuccess"/>
    </el-dialog>
  </div>
</template>

<script>
  import LeftNav from '~/components/admin/LeftNav'
  import axios from 'axios'
  import cropper from '~/components/admin/cropper';


  export default {
    name: "class",
    layout: 'admin',
    components: {
      LeftNav,
      cropper
    },
    data() {
      return {
        // 侧边导航
        leftNav: [],
        // 图片裁剪框显示
        cropper_show: false,
        // 上传图片的数组
        submit_avatar: {
          pic_head_url: '/admin/images/medal/header.jpg',
          pic_head: '/admin/images/class/add-pic.png'
        },
        // 加载动画
        fullscreenLoading: false,
        // 编辑弹窗控制显示
        edit_show: false,
        // 删除章节的按钮显示
        section_delete_show: false,
        // 课程选择
        type_value: 0, // 这个是序号
        //是编辑还是添加  因为接口分开的，这边需要分来
        IsEdit: false,
        //要删除的章节
        chapter_delete: [],
        //要删除的小节
        section_delete: [],
        //   当前课程ID
        now_course_id: 0,
        //弹窗标题
        cover_tit: '创建课程',
        // 课时选择后的数组
        hour_alreay_choose: [],
        dialogCropperVisible: false,
        cutPicInfo: {},
      }
    },
    async asyncData({store}) {
      // 请求课程列表
      let params = {
        url: '/manage/manage_course/course_list',
        data: {
          first_sort_id: '',
          second_sort_id: '',
          course_name: '',
          teacher_id: '',
          organization_id: '',
          status: '',
          activity_type: '',
          page: 1,
          psize: 20
        }
      };
      let res = await store.dispatch('adminHttpGet', params);
      console.log('课程列表', res);

      // 获取一级分类信息
      let fir = {
        url: '/manage/manage_course/course_add_sort_list',
        data: {
          father_id: 0
        }
      };
      let res_fir = await  store.dispatch('adminHttpGet', fir);
      let res2_fir = await store.dispatch('adminHttpGet', fir);
      // 增加一个全部选项
      let fir_json = {id: '', sort_name: '全部'};
      res_fir.data.unshift(fir_json);
      // 获取机构
      let jigou_params = {
        url: '/manage/manage_course/course_organization_list'
      };
      let jigou_res = await  store.dispatch('adminHttpGet', jigou_params);
      let jigou2_res = await  store.dispatch('adminHttpGet', jigou_params);
      let jg_json = {id: '', title: '全部'};
      jigou_res.data.unshift(jg_json);
      // 获取视频库
      let video_params = {
        url: '/manage/manage_video/video_list',
        data: {
          page: 1,
          psize: 20,
          is_used: '',
          video_id: '',
          show_name: '',
          create_start_time: '',
          create_end_time: '',
          role: 1,
        }
      };
      let video_res = await store.dispatch('adminHttpGet', video_params);

      // 视频添加选择状态
      if (video_res.data.data.data) {
        video_res.data.data.data.forEach(function (val, key) {
          val.isChoose = false
        });
      } else {
        video_res.data.data.data = []
      }

      //  返回数组
      return {
        // 课程列表数组
        class_info: res.data.data,
        //  课程列表分页
        paging: {
          currentPage: 1,  //当前页
          page_sizes: [10, 20, 30], //每页显示多少条下拉
          page_size: 20,// 默认显示多少条
          total: res.data.total
        },
        //  搜索
        search_info: {
          // 一级课程
          first_sort_select: res_fir.data,
          first_sort_id: '',
          // 二级课程
          second_sort_id: '',
          second_sort_select: [{id: '', sort_name: '全部'}],
          // 课程名称
          course_name: '',
          //老师
          teacher_select: [{id: '', realname: '全部'}],
          teacher_id: '',
          //机构
          organization_id: '',
          organization_select: jigou_res.data,
          // 状态
          status_select: [
            {num: '', name: '全部'},
            {num: 1, name: '已上架'},
            {num: 0, name: '已下架'}
          ],
          status: '',
          // 活动
          activity_type: '',
          activity_select: [
            {num: '', name: '全部'},
            {num: 1, name: '精品课程'},
            {num: 2, name: '最新课程'},
            {num: 3, name: '买一赠一'},
            {num: 4, name: '折扣活动'},
            {num: 5, name: '限时免费'},
            {num: 6, name: '积分购'}
          ]

        },
        // 编辑信息
        edit_info: {
          //名称
          lesson_name: '',
          // 机构
          organization_id: '',
          organization_tmp_id: '',
          organization_select: jigou2_res.data,
          // 老师
          teacher_id: '',
          teacher_tmp_id: '',
          teacher_select: [],
          // 一级分类
          first_sort_select: res2_fir.data,
          first_sort_id: '',
          first_sort_tmp_id: '',
          // 二级分类
          second_sort_id: '',
          second_sort_tmp_id: '',
          second_sort_select: [],
          // 封面
          cover: '',
          //  单价
          price: '',
          // 时长
          time: 0,
          // 状态
          status: 1,
          status_select: [
            {num: 1, name: '已上架'},
            {num: 0, name: '已下架'}
          ],
          //课程简介
          introduce: '',
          // 详情介绍
          description: '',
          chapter_content: [
            {
              chapter_name: "章名称",
              sections: [],
            }
          ],
        },
        //  视频库
        class_hour: {
          now_zhang: '',
          show: false,
          video_id: '',
          video_name: '',
          time: [],
          choose_use: '',
          isUse: [
            {type: '', name: '全部'},
            {type: 0, name: '否'},
            {type: 1, name: '是'}
          ],
          paging: {
            currentPage: 1,  //当前页
            page_sizes: [10, 20, 30], //每页显示多少条下拉
            page_size: 20,// 默认显示多少条
            total: video_res.data.data.total
          },
          detail: video_res.data.data.data,
        },
        // 查看信息
        see_info: {
          show: false,
          cover: '',
          tit: '',
          teacher: '',
          time: 0,
          class_hour: 0,
          nav_type: 1,  //1表示课程目录   2表示课程介绍  默认是 1
          course_list: [],
          first_sort: '', // 一级标题
          second_sort: '',// 二级标题
        },
      }
    },
    methods: {
      // 课程列表分页效果
      list_paging() {
        const that = this;
        that.fullscreenLoading = true;
        axios({
          baseURL: that.$store.state.admin.baseUrl,
          url: '/manage/manage_course/course_list',
          method: 'get',
          headers: {
            token: that.$store.state.admin.token,
          },
          params: {
            first_sort_id: that.search_info.first_sort_id,
            second_sort_id: that.search_info.second_sort_id,
            course_name: that.search_info.course_name,
            teacher_id: that.search_info.teacher_id,
            organization_id: that.search_info.organization_id,
            status: that.search_info.status,
            activity_type: that.search_info.activity_type,
            page: that.paging.currentPage,
            psize: that.paging.page_size,
          }
        }).then((res) => {
          that.fullscreenLoading = false;
          if (res.data.code === 0) {
            that.class_info = res.data.data.data;
            that.paging.total = res.data.data.total;
          } else {
            this.$message({
              showClose: true,
              message: '暂无数据，请更换搜索条件',
              type: 'error'
            });
            that.class_info = []
          }
        }).catch((error) => {
          console.log(error);
        })
      },
      //搜索
      search_list() {
        this.paging.currentPage = 1;
        this.paging.page_size = 20;
        this.list_paging();
      },
      // 创建
      create_course() {
        const that = this;
        //权限
        let checkInfo = this.comsys.adminCheckRole(this.$store.state.admin.adminRole.data, 'manage_course', 'course_add');
        if (!checkInfo) {
          this.$message({message: '警告，您无此权限', type: 'warning'});
          return false
        }


        this.edit_show = true;
        this.IsEdit = false;
        that.submit_avatar.pic_head = '/admin/images/class/add-pic.png';
        // 初始化
        this.edit_info.lesson_name = '';
        this.edit_info.introduce = '';
        this.edit_info.organization_id = '';
        this.edit_info.organization_tmp_id = '';
        this.edit_info.teacher_id = '';
        this.edit_info.teacher_tmp_id = '';
        this.edit_info.teacher_select = [];
        this.edit_info.first_sort_id = '';
        this.edit_info.first_sort_tmp_id = '';
        this.edit_info.second_sort_id = '';
        this.edit_info.second_sort_tmp_id = '';
        this.edit_info.second_sort_select = [];
        this.edit_info.cover = '';
        this.edit_info.price = '';
        this.edit_info.time = 0;
        this.edit_info.status = 1;
        this.edit_info.description = '';
        this.cover_tit = '创建课程';
        this.edit_info.chapter_content = [
          {
            chapter_name: "章名称",
            sections: [],
          }
        ];
      },
      //  分页每页显示多少条
      handleSizeChange(val) {
        this.paging.page_size = val;
        this.paging.currentPage = 1;
        this.list_paging();
      },
      handleCurrentChange(val) {
        // 当前页
        this.paging.currentPage = val;
        this.list_paging();
      },
      // 接受返回的图片
      return_img(val) {
        console.log('接受返回的图片', val);
        this.submit_avatar.pic_head = val;
        let arr = val.split('/');
        this.edit_info.cover = arr.pop();
      },
      //失去焦点事件
      onEditorBlur() {
      },
      //获得焦点事件
      onEditorFocus() {
      },
      //内容改变事件
      async onEditorChange() { //内容改变事件
        const that = this;
        var imgReg = /<img.*?(?:>|\/>)/gi;
        var srcReg = /src=[\'\"]?([^\'\"]*)[\'\"]?/i;
        var arr = that.edit_info.description.match(imgReg);
        arr = arr == null ? [] : arr;
        for (var i = 0; i < arr.length; i++) {
          var src = arr[i].match(srcReg);
          //获取图片地址
          if (src[1]) {
            if (src[1].indexOf('data:image') > -1) {
              let params = {url: "/common/file/add", data: {file_base64: src[1]}};
              let res = await this.$store.dispatch("adminHttpPost", params);
              that.edit_info.description = that.edit_info.description.replace(src[1], res.data.file_url);
            }
          }
        }
        console.log(that.edit_info.description);
      },
      // 视频分页 获取列表
      async video_paging() {
        const that = this;
        let start_time, end_time;
        if (that.class_hour.time) {
          start_time = that.class_hour.time[0];
          end_time = that.class_hour.time[1];
        } else {
          start_time = '';
          end_time = '';
        }
        that.fullscreenLoading = true;
        let video_params = {
          url: '/manage/manage_video/video_list',
          data: {
            page: that.class_hour.paging.currentPage,
            psize: that.class_hour.paging.page_size,
            is_used: that.class_hour.choose_use,
            video_id: that.class_hour.video_id,
            show_name: that.class_hour.video_name,
            create_start_time: start_time,
            create_end_time: end_time,
          }
        };
        let video_res = await that.$store.dispatch('adminHttpGet', video_params);
        if (video_res) {
          that.fullscreenLoading = false;
        }
        // 视频添加选择状态
        if (video_res.data.data.data.length !== 0) {
          video_res.data.data.data.forEach(function (val, key) {
            if (that.hour_alreay_choose.length !== 0) {
              that.hour_alreay_choose.forEach((vv, kk) => {
                console.log('222', val.id);
                val.id === vv.id ? val.isChoose = true : val.isChoose = false
              })
            } else {
              val.isChoose = false
            }
          });
          console.log('啦啦啦啦', video_res.data.data.data);
        } else {
          video_res.data.data.data = []
        }
        that.class_hour.detail = video_res.data.data.data;
        that.class_hour.paging.total = video_res.data.data.total
      },
      // 视频分页-当前每页显示的条目数变化
      video_handleSizeChange(val) {
        this.class_hour.paging.page_size = val;
        this.class_hour.paging.currentPage = 1;
        this.video_paging();
      },
      // 视频分页-当前页变化
      video_handleCurrentChange(val) {
        this.class_hour.paging.currentPage = val;
        this.video_paging();
      },
      // 视频搜索
      video_search() {
        this.class_hour.paging.currentPage = 1;
        this.class_hour.paging.page_size = 1;
        this.video_paging();
      },
      //  添加章节
      add_num() {
        const that = this;
        if (that.edit_info.chapter_content.length < 20) {
          const json = {
            chapter_name: "章节名称",
            chapter_id: -1,
            sections: [],
          };
          that.edit_info.chapter_content.push(json);
        } else {
          that.$message.error('最多只能添加20章!')
        }

      },
      //  删除章节
      detele_num(ind, id) {
        const that = this;


        that.$confirm('此操作将永久删除该章节, 是否继续?', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          let len = that.edit_info.chapter_content.length;
          if (len > 1) {
            that.edit_info.chapter_content.splice(ind, 1)
          }
          // 编辑模式下并且不是新增的章节删除
          if (that.IsEdit && parseInt(id) !== -1) {
            that.chapter_delete.push(id);
          }
          console.log(that.chapter_delete)
        }).catch(() => {
          that.$message({
            type: 'info',
            message: '已取消删除'
          });
        });
      },
      //  增加课时
      add_hour(ind) {
        const that = this;
        that.class_hour.show = true;
        that.class_hour.now_zhang = ind;
        // 初始化
        that.class_hour.detail.forEach((val, key) => {
          val.isChoose = false
        })
      },
      //  删除课时
      delete_hour(index, ind, id) {
        const that = this;

        that.$confirm('此操作将永久删除该课时, 是否继续?', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          that.edit_info.chapter_content[index].sections.splice(ind, 1);
          if (that.IsEdit && parseInt(id) !== -1) {
            axios({
              url: '/manage/manage_course/course_section_del',
              baseURL: that.$store.state.admin.baseUrl,
              method: 'post',
              headers: {
                token: that.$store.state.admin.token
              },
              data: {
                section_ids: id
              }
            }).then((res) => {
              console.log('删除节', res);
              if (res.data.code === 0) {
                that.$message({
                  type: 'success',
                  message: '刪除成功!'
                })
              }
            }).catch((err) => {
              console.log(err);
            })
          }
        }).catch(() => {
          that.$message({
            type: 'info',
            message: '已取消删除'
          });
        });
      },
      //  app观看取消和选择
      app_see(index, ind, bool) {
        const that = this;
        let edit = that.edit_info.chapter_content[index].sections[ind].Isedit;
        if (edit) {
          that.edit_info.chapter_content[index].sections[ind].app_free = bool;
        }
      },
      //  pc观看和取消
      pc_see(index, ind, bool) {
        const that = this;
        let edit = that.edit_info.chapter_content[index].sections[ind].Isedit;
        if (edit) {
          that.edit_info.chapter_content[index].sections[ind].pc_free = bool;
        }

      },
      //  课时编辑
      hour_edit(index, ind) {
        const that = this;
        if (that.edit_info.chapter_content[index].sections[ind].Isedit && that.edit_info.chapter_content[index].sections[ind].section_name === '') {
          that.$message.error('课程信息请填写完整!')
        } else {
          that.edit_info.chapter_content[index].sections[ind].Isedit = !that.edit_info.chapter_content[index].sections[ind].Isedit;
        }
      },
      // 课时选择
      hour_choose(ind, bool, item) {
        const that = this;
        console.log(item);
        if (parseInt(item.duration) === 0) {
          // 获取课程时间
          axios({
            url: '/common/video/video_duration_save',
            method: 'post',
            baseURL: that.$store.state.admin.baseUrl,
            headers: {
              token: that.$store.state.admin.token
            },
            data: {
              videoid: item.video_id
            }
          }).then((res) => {
            console.log(res);
            that.class_hour.detail[ind].duration = res.data.data.toFixed(1)
          }).catch((err) => {
            console.log(err);
          })
        }

        if (bool) {
          that.hour_alreay_choose.push(item);
        } else {
          that.hour_alreay_choose.forEach((val, key) => {
            if (val.video_id === item.video_id) {
              that.hour_alreay_choose.splice(key, 1);
            }
          })
        }
        that.class_hour.detail[ind].isChoose = bool;

      },
      //  课时选择弹窗关闭
      close_hour() {
        this.class_hour.show = false
      },
      //  课程编辑
      to_edit(id) {
        const that = this;
        // 加载动画
        that.fullscreenLoading = true;
        //权限
        let checkInfo = this.comsys.adminCheckRole(this.$store.state.admin.adminRole.data, 'manage_course', 'course_edit_get');
        if (!checkInfo) {
          this.$message({message: '警告，您无此权限', type: 'warning'});
          // 加载动画
          that.fullscreenLoading = false;
          return false
        }


        //编辑的具体内容
        let sec_info, fir_info, tea_info;
        that.edit_show = true;
        that.now_course_id = id;
        that.IsEdit = true;
        this.cover_tit = '编辑课程';
        // 清空要删除的数组
        that.chapter_delete = [];
        that.section_delete = [];


        axios({
          method: 'get',
          url: '/manage/manage_course/course_edit_get',
          baseURL: that.$store.state.admin.baseUrl,
          headers: {
            token: that.$store.state.admin.token
          },
          params: {
            course_id: id
          }
        }).then(async (res) => {
          console.log('编辑', res);

          // 解决没有图片的情况
          if (res.data.data.cover.value === '') {
            res.data.data.cover.value = '/admin/images/class/add-pic.png';
          }
          // 获取一级列表
          let res_sec = {
            url: '/manage/manage_course/course_add_sort_list',
            data: {
              father_id: res.data.data.first_sort_id
            }
          };
          fir_info = await that.$store.dispatch('adminHttpGet', res_sec);
          // 获取二级课程的列表
          let res_teacher = {
            url: '/manage/manage_course/course_organization_teacher_list',
            data: {
              organization_id: res.data.data.organization_id
            }
          };
          sec_info = await that.$store.dispatch('adminHttpGet', res_teacher);

          // 获取老师状态
          let tea_sec = {
            url: '/manage/organization_teacher/show',
            data: {
              id: res.data.data.teacher_id
            }
          };
          let tea_res = await that.$store.dispatch('adminHttpGet', tea_sec);

          // 对章节 小节的操作
          res.data.data.chapters.forEach(function (val, key) {
            val.sections = val.course_section;
            val.sections.forEach(function (vv, kk) {
              vv.Isedit = false
            })
          });

          // 初始化
          that.submit_avatar.pic_head = res.data.data.cover.value ? res.data.data.cover.value : '/admin/images/class/add-pic.png';
          that.edit_info.lesson_name = res.data.data.course_name;
          that.edit_info.organization_id = res.data.data.organization_id;
          that.edit_info.teacher_id = res.data.data.teacher_id;
          that.edit_info.teacher_select = sec_info.data;
          that.edit_info.first_sort_id = res.data.data.first_sort_id;
          that.edit_info.second_sort_id = res.data.data.second_sort_id;
          that.edit_info.introduce = res.data.data.seo_description;
          that.edit_info.second_sort_select = fir_info.data;
          //that.edit_info.cover = res.data.data.cover.value;
          this.return_img(res.data.data.cover.value);
          that.edit_info.price = res.data.data.price;
          that.edit_info.time = res.data.data.media_time;
          that.edit_info.status = res.data.data.status;
          that.edit_info.description = res.data.data.description;
          that.edit_info.chapter_content = res.data.data.chapters;

          // 老师状态，老师冻结情况下 课程无法上架
          if (tea_res.data.status === 1) {
            that.edit_info.status_select = [
              {num: 1, name: '已上架'},
              {num: 0, name: '已下架'}
            ];
          } else {
            that.edit_info.status = 0;
            that.edit_info.status_select = [
              {num: 0, name: '已下架'}
            ];
          }

          that.fullscreenLoading = false;
        }).catch((err) => {
          console.log(err);
        })
      },
      //  查看课程数据
      to_data(ind) {
        console.log('查看课程数据' + '' + ind)
      },
      //  关闭编辑弹窗
      close_edit() {
        this.edit_show = false;
      },
      // 新增课时保存
      save_hour() {
        const that = this;
        let time_all = 0;
        const ind = that.class_hour.now_zhang;
        $.each(that.hour_alreay_choose, function (key, val) {
          console.log(val)
          let json = {
            section_name: val.show_name.split('.')[0],
            video_name: val.show_name,
            video_id: val.video_id,
            media_time: val.duration,
            app_free: 0,
            pc_free: 0,
            Isedit: false,
            section_id: -1
          };
          that.edit_info.chapter_content[ind].sections.push(json);
        });
        that.edit_info.chapter_content[ind].sections.forEach((val, key) => {
          time_all += parseInt(val.media_time);
        });
        that.edit_info.time = time_all;
        that.class_hour.show = false;
        // 清除选中效果
        that.hour_alreay_choose = [];
        that.class_hour.detail.forEach((val, key) => {
          val.isChoose = false;
        })
      },
      // 课程保存
      lesson_save() {
        const that = this;
        let num = 0;
        // 必填项 不为空
        if (that.edit_info.lesson_name !== '' && that.edit_info.organization_id !== '' && that.edit_info.teacher_id !== '' && that.edit_info.teacher_id !== '' && that.edit_info.first_sort_id !== '' && that.edit_info.second_sort_id !== '' && that.edit_info.price !== '' && that.edit_info.status !== '' && parseInt(that.edit_info.time) > 0 && that.edit_info.cover !== '') {
          // 判断课时名称是否填写完整
          that.edit_info.chapter_content.forEach((val, key) => {
            if (val.sections) {
              val.sections.forEach((vv, kk) => {
                if (vv.section_name !== '') {
                  num += 0;
                } else {
                  num++;
                }
              })
            }

          });
          if (num !== 0) {
            that.$message.error('请先保存课时名称')
          } else {
            if (that.IsEdit) {
              // 编辑
              //   执行删除操作
              //  删除章
              if (that.chapter_delete.join(',') !== '') {
                axios({
                  url: '/manage/manage_course/course_chapter_del',
                  baseURL: that.$store.state.admin.baseUrl,
                  method: 'post',
                  headers: {
                    token: that.$store.state.admin.token
                  },
                  data: {
                    chapter_ids: that.chapter_delete.join(',')
                  }
                }).then((res) => {
                  console.log('删除章', res);
                }).catch((err) => {
                  console.log(err);
                })
              }
              console.log('dadsa', that.edit_info.chapter_content);
              axios({
                url: '/manage/manage_course/course_edit_save',
                baseURL: that.$store.state.admin.baseUrl,
                method: 'post',
                headers: {
                  token: that.$store.state.admin.token
                },
                data: {
                  course_id: that.now_course_id,
                  course_name: that.edit_info.lesson_name,
                  organization_id: that.edit_info.organization_id,
                  teacher_id: that.edit_info.teacher_id,
                  first_sort_id: that.edit_info.first_sort_id,
                  second_sort_id: that.edit_info.second_sort_id,
                  cover: that.edit_info.cover,
                  price: that.edit_info.price,
                  status: that.edit_info.status,
                  description: that.edit_info.description,
                  seo_description: that.edit_info.introduce,
                  chapter_content: JSON.stringify(that.edit_info.chapter_content)
                }
              }).then((res) => {
                console.log(res);
                if (res.data.code === 0) {
                  this.$message({
                    message: '保存成功!',
                    type: 'success'
                  });
                  that.list_paging();
                  that.edit_show = false;
                } else {
                  this.$message.error('保存失败!')
                }
              }).catch((error) => {
                console.log(error)
              })
            }
            else {
              // 新增
              axios({
                url: '/manage/manage_course/course_add',
                baseURL: that.$store.state.admin.baseUrl,
                method: 'post',
                headers: {
                  token: that.$store.state.admin.token
                },
                data: {
                  course_name: that.edit_info.lesson_name,
                  organization_id: that.edit_info.organization_id,
                  teacher_id: that.edit_info.teacher_id,
                  first_sort_id: that.edit_info.first_sort_id,
                  second_sort_id: that.edit_info.second_sort_id,
                  cover: that.edit_info.cover,
                  price: that.edit_info.price,
                  status: that.edit_info.status,
                  description: that.edit_info.description,
                  seo_description: that.edit_info.introduce,
                  chapter_content: JSON.stringify(that.edit_info.chapter_content)
                }
              }).then((res) => {
                if (res.data.code === 0) {
                  that.list_paging();
                  that.edit_show = false;
                }
              }).catch((error) => {
                console.log(error)
              })
            }
          }

        } else if (that.edit_info.cover === '') {
          this.$message.error('请上传课程封面!');
        } else {
          this.$message.error('必填项不能为空,课程必须要有视频!');
        }
      },
      //  编辑下面的机构的老师
      edit_jigou_change() {
        const that = this;
        that.edit_info.teacher_id = '';
        axios({
          baseURL: that.$store.state.admin.baseUrl,
          url: '/manage/manage_course/course_organization_teacher_list',
          method: 'get',
          headers: {
            token: that.$store.state.admin.token,
          },
          params: {
            organization_id: that.edit_info.organization_id
          }
        }).then((res) => {
          that.edit_info.teacher_select = res.data.data;
        }).catch((error) => {
          console.log(error)
        })
      },
      // 编辑一级课程分类改变时二级课程分类跟着改变
      edit_fir_change() {
        const that = this;
        that.edit_info.second_sort_id = '';
        // 获取二级分类的类表
        axios({
          baseURL: that.$store.state.admin.baseUrl,
          url: '/manage/manage_course/course_add_sort_list',
          method: 'get',
          headers: {
            token: that.$store.state.admin.token
          },
          params: {
            father_id: that.edit_info.first_sort_id
          }
        }).then((res) => {
          that.edit_info.second_sort_select = res.data.data
        }).catch((error) => {
          console.log(error)
        })
      },

      setMeau() {
        let leftNav = []
        let roles = this.$store.state.admin.adminRole.data
        //更新管理
        let manage_course = this.comsys.adminGetMeau(roles, "manage_course")
        let manage_video = this.comsys.adminGetMeau(roles, "manage_video")
        let video_list = [] //视频列表
        let course_list = [] //课程列表
        let course_sort_list = []  //课程分类
        if (manage_video.length > 0) {
          video_list = this.comsys.adminGetMeau(manage_video[0].son, "video_list")
        }
        if (manage_course.length > 0) {
          course_list = this.comsys.adminGetMeau(manage_course[0].son, "course_list")
          course_sort_list = this.comsys.adminGetMeau(manage_course[0].son, "course_sort_list")
        }
        if (video_list.length > 0) {
          leftNav.push({name: '视频库', link: '/admin/video', active: false})
        }
        if (course_list.length > 0) {
          leftNav.push({name: '课程管理', link: '/admin/class', active: true})
        }
        if (course_sort_list.length > 0) {
          leftNav.push({name: '课程分类管理', link: '/admin/classification', active: false})
        }
        this.leftNav = leftNav
      },

      //图片上传
      async cutPicSuccess(res) {
        const that = this;
        this.dialogCropperVisible = res.visible;
        let params = {url: "/common/file/add", data: {file_base64: res.data}};
        let rest = await this.$store.dispatch("adminHttpPost", params);
        if (rest.code == 4002) {
          that.submit_avatar.pic_head = rest.data.file_url;
          that.edit_info.cover = rest.data.filename
        }
        else {
          this.$message.error('图片上传失败');
          that.submit_avatar.pic_head = '/admin/images/class/add-pic.png';
        }
      },
      // 裁剪
      cut_pic(picWidth, picHeight) {
        this.$set(this.cutPicInfo, "aspectRatio", picWidth / picHeight);
        this.dialogCropperVisible = true
      },
      // 查看导航切换
      see_nav_type(num) {
        this.see_info.nav_type = num
      },
      async to_see(id, item) {
        const that = this;
        that.see_info.show = true;
        that.fullscreenLoading = true;
        that.see_info.nav_type = 1;
        console.log(item);
        //获取一二级分类
        let fir = {
          url: '/manage/manage_course/course_add_sort_list',
          data: {
            father_id: 0
          }
        };
        let res_fir = await that.$store.dispatch('adminHttpGet', fir);
        if (res_fir.code === 0) {
          res_fir.data.forEach((val, key) => {
            if (val.id === parseInt(item.first_sort_id)) {
              that.see_info.first_sort = val.sort_name
            }
          })
        }
        let sec = {
          url: '/manage/manage_course/course_add_sort_list',
          data: {
            father_id: item.first_sort_id
          }
        };
        let sec_fir = await that.$store.dispatch('adminHttpGet', sec);
        if (sec_fir.code === 0) {
          sec_fir.data.forEach((val, key) => {
            if (val.id === parseInt(item.second_sort_id)) {
              that.see_info.second_sort = val.sort_name
            }
          })
        }

        // 获取信息
        let req = {
          url: '/manage/manage_course/course_edit_get',
          data: {
            course_id: id
          }
        };
        let res = await that.$store.dispatch('adminHttpGet', req);
        if (res) {
          that.fullscreenLoading = false;
        }
        if (res.code === 0) {
          that.see_info.tit = res.data.course_name;
          that.see_info.cover = res.data.cover.value;
          that.see_info.teacher = item.organization_teacher.realname;
          that.see_info.time = res.data.media_time;
          that.see_info.con = res.data.description;
          that.see_info.class_hour = res.data.section_num;
          that.see_info.course_list = res.data.chapters;
        } else {
          that.$message.error(res.message);
        }
      }
    },
    watch: {
      // 一级课程分类改变时二级课程分类跟着改变
      'search_info.first_sort_id': function () {
        const that = this;
        console.log(that.search_info.first_sort_id);
        that.search_info.second_sort_id = '';
        if (that.search_info.first_sort_id === '') {
          that.search_info.second_sort_select = [{id: '', sort_name: '全部'}]
        } else {
          // 获取二级分类的类表
          axios({
            baseURL: that.$store.state.admin.baseUrl,
            url: '/manage/manage_course/course_add_sort_list',
            method: 'get',
            headers: {
              token: that.$store.state.admin.token
            },
            params: {
              father_id: that.search_info.first_sort_id
            }
          }).then((res) => {
            that.search_info.second_sort_select = res.data.data
          }).catch((error) => {
            console.log(error)
          })
        }
      },
      //  获取机构下面的老师
      'search_info.organization_id': function () {
        const that = this;
        that.search_info.teacher_id = '';
        if (that.search_info.organization_id === '') {
          that.search_info.teacher_select = [{id: ' ', realname: '全部'}];
        } else {
          axios({
            baseURL: that.$store.state.admin.baseUrl,
            url: '/manage/manage_course/course_organization_teacher_list',
            method: 'get',
            headers: {
              token: that.$store.state.admin.token,
            },
            params: {
              organization_id: that.search_info.organization_id
            }
          }).then((res) => {

            that.search_info.teacher_select = res.data.data;
          }).catch((error) => {
            console.log(error)
          })
        }
      },

      // 章节至少保持一个
      'edit_info.chapter_content':

        function () {
          const that = this;
          if (that.edit_info.chapter_content.length === 1) {
            that.section_delete_show = false
          } else {
            that.section_delete_show = true
          }
        },

    },
    mounted() {
      this.setMeau()
    },
    head() {
      return {
        title: '课程管理',
        link: [
          {
            href: '/admin/css/cropper.min.css',
            type: 'text/css',
            rel: 'stylesheet',
          },
          {
            href: '/admin/css/common.css',
            type: 'text/css',
            rel: 'stylesheet',
          },
          {
            href: '/admin/css/class.css',
            type: 'text/css',
            rel: 'stylesheet',
          },
        ],
        script: [
          {src: '/admin/js/cropper.min.js'},
        ]
      }
    },
  }
</script>

<style scoped>

  .fade.in {
    opacity: 1
  }

  .modal-backdrop.in {
    opacity: .5
  }

  .control-label {
    float: left;
  }

  .input-r {
    float: right;
  }

  .modal.fade .modal-dialog {
    transition: -webkit-transform 0.3s ease-out;
    transition: transform 0.3s ease-out;
    transition: transform 0.3s ease-out, -webkit-transform 0.3s ease-out;
    -webkit-transform: translate(0, 50%);
    transform: translate(0, 50%);
  }

  .modal-dialog {
    width: 770px;
    height: 380px;
    max-width: 770px;
  }

  .modal.fade.bs-example-modal-lg {
    background: rgba(0, 0, 0, 0.4);
  }

  .modal-dialog {
    width: 946px;
    max-width: 946px;
  }

  .modal-header {
    padding: 15px 20px;
  }

  .modal-footer {
    justify-content: space-between;
    padding: 7px 16px;
  }

  .modal-footer > button {
    margin: 0 !important;
  }

  .modal-body {
    padding: 20px 40px;
    display: flex;
  }

  .modal-body-cropper {
    padding: 40px 40px 20px;
  }

  .img-container {
    max-height: 1000px;
  }

  @media (min-width: 768px) {
    .img-container {
      width: 864px;
      height: 626px;
    }
  }

  .select-img {
    margin-top: 36px;
    margin-bottom: 0 !important;
  }

  .modal-content {
    margin-bottom: 100px;
    margin-top: -100px;
  }
</style>
