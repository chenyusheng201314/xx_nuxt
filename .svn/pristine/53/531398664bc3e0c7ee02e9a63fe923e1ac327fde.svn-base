<template>
  <div>
    <div class="admin-blogclassify">
      <h2>
        <span>博客分类管理</span>
        <div class="add-first true" @click="add_first">+ 添加一级分类</div>
      </h2>
      <div class="lists">
        <!--这个没class名的div啥意思都没有，负责拖拽 和数组遍历-->
        <div
          v-for="(item,index) in show_lists" :key="item.id"
          v-dragging="{item: item, list: show_lists,group:'item',id: item.id}" @mousedown="mousedown(item.id)"
          @mouseup="mouseup">
          <!--未编辑状态-->
          <div class="lists-tit" v-show="!item.isEdit">
            <div class="left">
              <span class="span-no">{{item.sort_name}}</span>
              <span class="span-no">博客数量：{{item.all_blog}}</span>
            </div>
            <div class="right">
              <span class="edit" @click="list_edit(index)">编辑</span>
              <img src="/admin/images/class/down.png" alt="" class="select-down" :class="{choose: item.child_show}"
                   @click="select_down(index)">
              <img src="/admin/images/class/solt.png" alt="" class="solt" @mousedown="mouse_down(item.id)">
            </div>
          </div>
          <!--编辑状态-->
          <div class="lists-tit" v-show="item.isEdit">
            <img class="tit-delete" src="/admin/images/class/delete.png" alt="" @click="delete_first(item)">
            <div class="left">
              <input type="text" class="inp" v-model="item.sort_name" maxlength="10" @focus="remove_tit(index)">
              <span class="span2">博客数量：{{item.all_blog}}</span>
            </div>
            <div class="right">
              <span class="add-title" @click="cover_change(true,index)">SEO管理</span>
              <span class="add-title" @click="add_second(index)">+ 添加二级分类</span>
              <span class="save" @click="list_save(index,item)">保存</span>
              <img src="/admin/images/class/solt.png" alt="" class="solt" style="margin-right: 2%">
            </div>
          </div>
          <!--子类未编辑状态-->
          <ul class="list" v-show="item.child_show && !item.isEdit">
            <li v-for="(it,ind) in item.second_sorts" :key="ind+'li'">
              <span class="span1">{{ind + 1}}</span>
              <span class="span1 span-name">{{it.sort_name}}</span>
              <span class="span1">博客数量：{{it.all_blog}}</span>
            </li>
          </ul>
          <!--子类编辑状态-->
          <ul class="list" v-show="item.isEdit">
            <li v-for="(it,ind) in item.second_sorts" :key="ind+'li'">
              <div class="li-left">
                <span class="span1">{{ind + 1}}</span>
                <input type="text" class="inp" v-model="it.sort_name" maxlength="10">
                <span class="span1">博客数量：{{it.all_blog}}</span>
              </div>
              <div class="li-right">
                <span class="delete" @click="delete_one(index,ind,it)">删除</span>
                <img
                  src="/admin/images/class/to-up.png" alt=""
                  @click="to_up(index,ind)"
                  :class="{m_r_75: ind === (item.second_sorts.length - 1), m_r_45 : ind !== 0}"
                  v-show="ind !== 0"
                >

                <img
                  src="/admin/images/class/to-down.png" alt=""
                  @click="to_down(index,ind)"
                  :class="{m_r_75 : ind === 0}"
                  v-show="ind !== (item.second_sorts.length - 1)">
              </div>
            </li>
          </ul>
        </div>
      </div>
      <!--sec弹窗-->
      <div class="seo-cover" v-show="cover_show">
        <div class="seo-con">
          <span class="cover-close" @click="cover_change(false)"><img src="/admin/images/blog/close.png" alt=""></span>
          <h2><span>SEO管理</span></h2>
          <ul class="con-list">
            <li>
              <div class="con-left"><span>SEO页面标题</span></div>
              <div class="con-right">
                <input type="text" v-model="seo_list.tit">
              </div>
            </li>
            <li>
              <div class="con-left"><span>SEO关键词</span></div>
              <div class="con-right">
                <input type="text" v-model="seo_list.keywords">
              </div>
            </li>
            <li>
              <div class="con-left"><span>SEO页面描述</span></div>
              <div class="con-right">
                <textarea v-model="seo_list.introduce"></textarea>
              </div>
            </li>
          </ul>
          <div class="seo-save" @click="seo_save">保存</div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
  import '~/static/admin/css/blogClassify.css'
  import VueDND from 'awe-dnd'
  import Vue from 'vue'
  import axios from 'axios'

  Vue.use(VueDND);

  export default {
    name: "blogClassify",
    head() {
      return {
        link: [
          {
            href: '/admin/css/blogClassify.css',
            type: 'text/css',
            rel: 'stylesheet',
          },
        ],
      }
    },
    data() {
      return {
        //SEO弹窗出现
        cover_show: false,
        //当前添加seo的对象
        now_seo: '',
        // seo数据
        seo_list: {
          tit: '',
          keywords: '',
          introduce: '',
        },
        this_id: '',
      }
    },
    async asyncData({store}) {
      let req = {
        url: '/manage/blog/blog_sort_list',
      };
      let res = await store.dispatch('adminHttpGet', req);
      if (res.code === 0) {
        res.data.forEach((val, key) => {
          val.isEdit = false;
          val.child_show = false;
        });
      } else {
        res.data = [];
      }
      return {
        //列表
        show_lists: res.data,
      }
    },
    methods: {
      // 更新列表
      async get_list() {
        const that = this;
        let req = {
          url: '/manage/blog/blog_sort_list',
        };
        let res = await that.$store.dispatch('adminHttpGet', req);
        console.log(res)
        if (res.code === 0) {
          res.data.forEach((val, key) => {
            val.isEdit = false;
            val.child_show = false;
          });
        } else {
          res.data = [];
        }
        that.show_lists = res.data;
      },
      //增加一级分类
      add_first() {
        const that = this;
        let checkInfo = this.comsys.adminCheckRole(this.$store.state.admin.adminRole.data, 'blog', 'blog_first_sort_add');
        // 判断权限
        if (!checkInfo) {
          this.$message({message: '警告，您无此权限', type: 'warning'});
          return false
        }

        let len = that.show_lists.length;
        if (len < 30) {

          axios({
            url: '/manage/blog/blog_first_sort_add',
            method: 'post',
            baseURL: that.$store.state.admin.baseUrl,
            headers: {
              token: that.$store.state.admin.token,
            },
            data: {
              sort_name: '默认标题',
              seo_title: '',
              seo_keywords: '',
              seo_description: '',
            }
          }).then((res) => {
            console.log(res);
            if (res.data.code === 0) {
              this.$message({
                type: 'success',
                message: '添加成功!'
              });
              that.get_list();
            } else {
              this.$message.error(res.data.message);
            }
          }).catch((err) => {
            console.log(err);
          })
        } else {
          that.$message.error('最多只能添加30条!')
        }


      },
      // 删除一级分类
      delete_first(item) {
        const that = this;
        let checkInfo = this.comsys.adminCheckRole(this.$store.state.admin.adminRole.data, 'blog', 'blog_first_sort_del');
        // 判断权限
        if (!checkInfo) {
          this.$message({message: '警告，您无此权限', type: 'warning'});
          return false
        } else {
          this.$confirm('此操作将永久删除该博客, 是否继续?', '提示', {
            confirmButtonText: '确定',
            cancelButtonText: '取消',
            type: 'warning'
          }).then(() => {
            if (item.all_blog !== 0) {
              this.$message({
                type: 'error',
                message: '已有博客，无法删除!'
              });
            } else {
              axios({
                method: 'post',
                url: '/manage/blog/blog_first_sort_del',
                baseURL: that.$store.state.admin.baseUrl,
                headers: {
                  token: that.$store.state.admin.token,
                },
                data: {
                  id: item.id
                }
              }).then((res) => {
                if (res.data.code === 0) {
                  that.$message({
                    type: 'success',
                    message: '删除成功!'
                  });
                  that.get_list()
                } else {
                  that.$message.error(res.data.message);
                }
              }).catch((err) => {
                console.log(err);
              })
            }
          }).catch(() => {
            this.$message({
              type: 'info',
              message: '已取消删除'
            });
          });
        }

      },
      // 编辑
      list_edit(ind) {
        let checkInfo = this.comsys.adminCheckRole(this.$store.state.admin.adminRole.data, 'blog', 'blog_sort_save');
        // 判断权限
        if (!checkInfo) {
          this.$message({message: '警告，您无此权限', type: 'warning'});
          return false
        } else {
          this.show_lists[ind].isEdit = true
        }
      },
      // 保存
      list_save(ind, item) {
        const that = this;
        let num = 0;
        // 权限
        let checkInfo = this.comsys.adminCheckRole(this.$store.state.admin.adminRole.data, 'blog', 'blog_sort_save');
        // 判断权限
        if (!checkInfo) {
          this.$message({message: '警告，您无此权限', type: 'warning'});
          return false
        }
        console.log(item);

        let tmp = [], json = {};
        // 获取子级
        item.second_sorts.forEach(function (val, key) {
          if (val.sort_name === '') {
            num++
          } else {
            num += 0
          }
          json = {
            sort: key,
            second_id: val.id,
            sort_name: val.sort_name
          };
          tmp.push(json);
        });
        if (item.sort_name === '' || num !== 0) {
          that.$message.error('标题不能为空!')
        }else {
          //发送请求
          axios({
            method: 'post',
            url: '/manage/blog/blog_sort_save',
            baseURL: that.$store.state.admin.baseUrl,
            headers: {
              token: that.$store.state.admin.token,
            },
            data: {
              first_sort_id: item.id,
              first_sort_title: item.sort_name,
              second_sort_content: JSON.stringify(tmp),
              seo_title: item.seo_title,
              seo_keywords: item.seo_keywords,
              seo_description: item.seo_description,
            }
          }).then((res) => {
            if (res.data.code === 0) {
              that.$message({
                message: '保存成功！',
                type: 'success'
              });
              that.show_lists[ind].isEdit = false;
              that.get_list();
            } else {
              that.$message.error(res.data.message);
            }
          }).catch((err) => {
            console.log(err);
          })
        }

      },
      //下拉
      select_down(ind) {
        this.show_lists[ind].child_show = !this.show_lists[ind].child_show
      },
      //排序
      to_up(index, ind) {
        const that = this;
        // 交换顺序
        that.show_lists[index].second_sorts.splice(ind - 1, 1, ...that.show_lists[index].second_sorts.splice(ind, 1, that.show_lists[index].second_sorts[ind - 1]));
      },
      // 排序
      to_down(index, ind) {
        const that = this;
        // 交换顺序
        that.show_lists[index].second_sorts.splice(ind, 1, ...that.show_lists[index].second_sorts.splice(ind + 1, 1, that.show_lists[index].second_sorts[ind]));
      },
      // 增加二级分类
      add_second(ind) {
        const that = this;
        let json = {
          sort_name: '',
          all_blog: 0,
          id: -1,
          sort: 0,
        };
        that.show_lists[ind].second_sorts.unshift(json);
      },
      //子级删除
      delete_one(index, ind, item) {
        const that = this;
        this.$confirm('此操作将永久删除该博客, 是否继续?', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          if (item.all_blog === 0) {
            if (item.id !== -1) {
              axios({
                method: 'post',
                url: '/manage/blog/blog_second_sort_del',
                baseURL: that.$store.state.admin.baseUrl,
                headers: {
                  token: that.$store.state.admin.token
                },
                data: {
                  id: item.id
                }
              }).catch((err) => {
                console.log(err);
              }).then((res) => {
                console.log(res);
                if (res.data.code === 0) {
                  this.$message({
                    type: 'success',
                    message: '删除成功!'
                  });
                  that.show_lists[index].second_sorts.splice(ind, 1);
                }
              })
            } else {
              that.show_lists[index].second_sorts.splice(ind, 1);
            }
          } else {
            this.$message.error('已有博客，无法删除！')
          }
        }).catch(() => {
          this.$message({
            type: 'info',
            message: '已取消删除'
          });
        });
      },
      //seo弹窗
      cover_change(bool, index) {
        const that = this;
        this.cover_show = bool;
        if (bool) {
          that.now_seo = index;
        }
      },
      // seo
      seo_save() {
        const that = this;
        let ind = that.now_seo;
        that.show_lists[ind].seo_title = that.seo_list.tit;
        that.show_lists[ind].seo_keywords = that.seo_list.keywords;
        that.show_lists[ind].seo_description = that.seo_list.introduce;
        that.cover_show = false;
        that.$message({
          type: 'success',
          message: '保存成功!'
        });
      },
      //  鼠标按下
      mousedown(id) {
        this.this_id = id;
      },
      mouseup() {
        this.this_id = '';
      },
      remove_tit(index) {
        const that = this;
        if (that.show_lists[index].sort_name === '默认标题') {
          that.show_lists[index].sort_name = ''
        }
      }
    },
    watch: {
      //把seo赋值给数组你点击的那个
      now_seo: function () {
        const that = this;
        let ind = that.now_seo;
        that.seo_list.tit = that.show_lists[ind].seo_title;
        that.seo_list.keywords = that.show_lists[ind].seo_keywords;
        that.seo_list.introduce = that.show_lists[ind].seo_description;
      }
    },
    mounted() {
      // 拖拽排序
      const that = this;
      let checkInfo = this.comsys.adminCheckRole(this.$store.state.admin.adminRole.data, 'blog', 'blog_first_sort_change');
      // 判断权限
      if (!checkInfo) {
        this.$message({message: '警告，您无此权限', type: 'warning'});
        return false
      } else {
        let this_id, top_id, down_id, len;
        // 拖动过程中
        this.$dragging.$on('dragged', ({value}) => {
          this_id = that.this_id;
        });
        // 拖动结束
        this.$dragging.$on('dragend', () => {
          that.show_lists.forEach(function (val, key) {
            if (val.id === this_id) {
              len = key
            }
          });
          // 获取ID
          if (len === 0) {
            top_id = 0;
            down_id = that.show_lists[len + 1].id
          } else if (len > 0 && len < that.show_lists.length - 1) {
            top_id = that.show_lists[len - 1].id;
            down_id = that.show_lists[len + 1].id
          } else if (len === that.show_lists.length - 1) {
            top_id = that.show_lists[len - 1].id;
            down_id = 0
          }
          axios({
            method: 'post',
            url: '/manage/blog/blog_first_sort_change',
            baseURL: that.$store.state.admin.baseUrl,
            headers: {
              token: that.$store.state.admin.token,
            },
            data: {
              this_id: this_id,
              top_id: top_id,
              down_id: down_id,
            }
          }).then((res) => {
            console.log(res);
          }).catch((err) => {
            console.log(err);
          })
        });
      }


    },
  }
</script>

<style scoped>

</style>
